<?xml version="1.0" encoding="UTF-8"?>
<otawa-script
    xmlns:xi="http://www.w3.org/2001/XInclude"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">



<!-- mem value for Core 1 (1.6P) /-->
<!-- Diff 1.6P et 1.6E : PSPR, DSPR, ICACHE, DCACHE /-->

<name>Aurix (TC275T) (TriCore 1.6)</name>

<info>
	<h1>Tricore16E</h1>
	
	<h2>Differences between core E and core P</h2>
	<ul>
		<li>no LP pipeline in core E</li>
		<li>instruction cache size: 16 KB (P), 8 KB (E)</li>
		<li>data cache size: 8 KB (P), 128 B (E)</li>
		<li>PSPR: 32 KB (P), 24 KB (E)</li>
		<li>DSPR: 120 KB (P), 112 KB (E)</li>
		<li></li>
	</ul>
</info>


<id>
	<arch>tricore</arch>
	<abi>eabi</abi>
	<mach>TC275T</mach>
</id>


<configuration>
	<!--
		The caches operate on two different bus frequencies:
			PCache works with FSI2
			DCache works with FSI
		One must to find out these frequencies via:
			IfxScuCcu_getFsiFrequency() and IfxScuCcu_getFsi2Frequency(), they are usual the same as the SRI freqency that CPU runs.
		To find CPU and SRI frequencies, one can use:
			IfxScuCcu_getCpuFrequency(IfxCpu_getCoreId()) and IfxScuCcu_getSriFrequency().
		In general, CPU/SRI operates on 200Mhz, while FSI2 and FSI operates on either 100MHz by default.
		From the table 2-16 in section 2.7, page 2-121, the initial PFlash access time, which happens when there is a PCache miss, is caculated as:
			5 + configured PFlash wait states
		The 5-cycle is assumed to be the time to access non-local on-chip storage.  On page 2-14, in the "request latency" section, that 1/2 cycles are
		required to complete request/address phase, if there is no other masters in the arbitration phase. The other 3/4 cycles (need to check) are due to
		the data phase, where the actual information is transfered from the slave via SRI. This may due to the uses of "BTR4" transfers which takes 4 cycles.
		(Question) Since the access are based on critical-word first, why needs the whole BTR4 cycles?
		
		The number of PFlash (same for DFlash) wait states, is the sum of (1) the ECC decoding time WSECPF, plus (2) the read access time WSPFLASH (p10-67).
		They can be obtained by reading the FCON reguster at 0xF8002014, and the fields are explained in p10-67 and p10-68.
		From observation, the bit fields contains the following values/meanings:
			WSPFLAH: 0100b, 5 FSI2 cycles of PFlash read access time
			WSECPF: 00b, 1 FSI2 cycle of PFlash ECE decoding time
			WSDFLASH: 011111b, 32 FSI cycles of DFlash read access time
			WSECDF: 010, 3 FSI cycles of DFlash ECE decoding time.
				
		Since FSI and FSI2 are half speed (100Mhz) comparing to the CPU/SRI frequency (200Mhz), hence 1 FSI/FSI2 cycle equals to 2 CPU/SRI cycles.
		
		Therefore the PFlash initial access time = SRI_time + (PFlash_read_time + PFlash_ECC_time)*2 = 5 + (5 + 1)*2 = 17 cycles
		DFlash access time = SRI_time + (DFlash_read_time + DFlash_ECC_time)*2 = 5 + (32 + 3)* 2 = 75 cycles		 
	 -->

	<item name="pfrws" type="range" default="0" label="Program Flash read wait states" low="0" high="13">
		<help>Defines the number of wait state for a PFLASH read. Set by register FCON.WSPFLASH </help>
	</item>
	<item name="dfrws" type="range" default="0" label="Data Flash read wait states" low="0" high="63">
		<help>Defines the number of wait state for a DFLASH read. Set by register FCON.WSDFLASH </help>
	</item>
	<item name="gpath" type="string" default="exeg" label="debug: graph path">
		<help>Path to a directory where exegraph will be dumped.</help>
	</item>
	<item name="core" type="enum" label="Type of core">
		<help>Select the type of core (P or E).</help>
		<value label="core E" value="0"/>  <!-- or using otawa::tricore16::CORE -->
		<value label="core P1" value="1" default="true"/>
		<value label="core P2" value="2"/>
	</item>
</configuration>

<platform>
	<!-- cache definition -->
	<xi:include href="tricore16/cache16P.xml"/>
	
	<!-- pipeline definition -->
	<xi:include href="tricore16/pipeline16P.xml"/>
	
	<!-- memory definition -->
	<memory>
		<banks>

			<!-- xSPR P2-->
			<bank>
				<name>DSPR P2</name>
				<address><offset>0x50000000</offset></address>
				<size>0x0001E000</size> <!-- 120 KBytes /-->
				<type>SPM</type>
				<writable>true</writable>
				<cached>false</cached> <!--  access remote DSPR should be cache-able -->
				<xsl:if test="$core=2">
					<latency>1</latency> <!-- access local DSPR should have no latency -->
				</xsl:if>
				<xsl:if test="$core!=2">
					<latency>3</latency>	<!-- TODO --> <!--  2 cycles SRI request and 1 cycle critical word, p2-121 & p2-14 -->
				</xsl:if>
			</bank>
			<bank>
				<name>PSPR P2</name>
				<address><offset>0x50100000</offset></address>
				<size>0x00008000</size> <!-- 32 KBytes /-->
				<type>SPM</type>
				<writable>true</writable>
				<cached>false</cached> <!--  access remote DSPR should be cache-able -->
				<xsl:if test="$core=2">
					<latency>1</latency> <!-- access local DSPR should have no latency -->
				</xsl:if>
				<xsl:if test="$core!=2">
					<latency>3</latency>	<!-- TODO --> <!-- TODO --> <!--  2 cycles SRI request and 1 cycle critical word, p2-121 & p2-14 -->
				</xsl:if>
			</bank>
			
			<!--  xSPR P1 -->
			<bank>
				<name>DSPR P1</name>
				<address><offset>0x60000000</offset></address>
				<size>0x0001E000</size> <!-- 120 KBytes /-->
				<type>SPM</type>
				<writable>true</writable>
				<cached>false</cached>
				<xsl:if test="$core=1">
					<latency>1</latency>
				</xsl:if>
				<xsl:if test="$core!=1">
					<latency>5</latency>				<!-- TODO -->
				</xsl:if>
			</bank>
			<bank>
				<name>PSPR P1</name>
				<address><offset>0x60100000</offset></address>
				<size>0x00008000</size> <!-- 32 KBytes /-->
				<type>SPM</type>
				<writable>true</writable>
				<cached>false</cached>
				<xsl:if test="$core=1">
					<latency>1</latency>
				</xsl:if>
				<xsl:if test="$core!=1">
					<latency>3</latency>				<!-- TODO -> 6-7 c -->
				</xsl:if>
			</bank>
			
			<!--  xSPR E -->
			<bank>
				<name>DSPR E</name>
				<address><offset>0x70000000</offset></address>
				<size>0x0001C000</size> <!-- 112 KBytes /-->
				<type>SPM</type>
				<writable>true</writable>
				<cached>false</cached>
				<xsl:if test="$core=0">
					<latency>0</latency>
				</xsl:if>
				<xsl:if test="$core!=0">
					<latency>3</latency>				<!-- TODO -->
				</xsl:if>
			</bank>
			<bank>
				<name>PSPR E</name>
				<address><offset>0x70100000</offset></address>
				<size>0x00006000</size> <!-- 24 KBytes /-->
				<type>SPM</type>
				<writable>true</writable>
				<cached>false</cached>
				<xsl:if test="$core=0">
					<latency>1</latency>
				</xsl:if>
				<xsl:if test="$core!=0">
					<latency>3</latency>				<!-- TODO -->
				</xsl:if>
			</bank>
			
			<bank>
				<name>SRAM</name>   <!--LMU sram cached-->
				<address><offset>0x90000000</offset></address>
				<size>0x00040000</size> <!-- 32 KBytes /-->
				<type>SPM</type>
				<latency>11</latency>				<!-- 6-7 cycles --> <!--  11 cycles when considering consecutive access, cache-able does not mean it will have cache hit hence the access time should be the same as non-cache-able address -->
				<write_latency>11</write_latency>	<!--  -->
				<writable>true</writable>
				<cached>true</cached>
			</bank>
			<bank>                     
				<name>SRAM</name>   <!--LMU sram no cached-->
				<address><offset>0xB0000000</offset></address>
				<size>0x00040000</size> <!-- 32 KBytes /-->
				<type>SPM</type>
				<latency>11</latency> <!-- 2 originally, 11 cycles when considering consecutive access -->
				<write_latency>11</write_latency>
				<writable>true</writable>
				<cached>false</cached>
			</bank>
			<bank>
				<name>BROM</name>   <!--BROM cached, in DFLASH 54 cycles-->
				<address><offset>0x8FFF8000</offset></address>
				<size>0x00040000</size>  <!-- 32KBytes /-->
				<type>ROM</type>
				<latency>54</latency> <!--  was 2 cycles  -->
				<write_latency>54</write_latency> <!--  was 2 cycles -->
				<writable>false</writable>
				<cached>true</cached>
			</bank>
			<bank>
				<name>BROM</name>   <!--BROM no cached, follows DFLASH 54 cycles -->
				<address><offset>0xAFFF8000</offset></address>
				<size>0x00040000</size> <!-- 32KBytes /-->
				<type>ROM</type>
				<latency>54</latency>
				<write_latency>54</write_latency>
				<writable>false</writable>
				<cached>false</cached>
			</bank>
			<bank>
				<name>PFLASH0</name>   <!--PFLASH0 cached-->
				<address><offset>0x80000000</offset></address>
				<size>0x01000000</size> <!-- 2 MBytes /-->
				<type>ROM</type>
				<!--  <latency><xsl:value-of select="1+$pfrws"/></latency>  -->
				<latency>13</latency> <!--  15 cycles in the original script, 13 cycles from IRT TN 082 -->
				<write_latency>13</write_latency>
				<writable>true</writable>
				<cached>true</cached>
			</bank>
			<bank>
				<name>PFLASH0</name>   <!--PFLASH0 no cached-->
				<address><offset>0xA0000000</offset></address>
				<size>0x01000000</size> <!-- 2 MBytes /-->
				<type>ROM</type>
				<latency>13</latency> <!--  <latency><xsl:value-of select="1+$pfrws"/></latency>  -->
				<write_latency>13</write_latency>
				<writable>true</writable>
				<cached>false</cached>
			</bank>
			<bank>
				<name>PFLASH1</name>   <!--PFLASH1 cached-->
				<address><offset>0x80200000</offset></address>
				<size>0x01000000</size> <!-- 2 MBytes /-->
				<type>ROM</type>
				<latency>13</latency> <!--  <latency><xsl:value-of select="1+$pfrws"/></latency>  -->
				<write_latency>13</write_latency>
				<writable>true</writable>
				<cached>true</cached>
			</bank>
			<bank>
				<name>PFLASH1</name>   <!--PFLASH1 no cached-->
				<address><offset>0xA0200000</offset></address>
				<size>0x01000000</size> <!-- 2 MBytes /-->
				<type>ROM</type>
				<latency>13</latency> <!--  <latency><xsl:value-of select="1+$pfrws"/></latency>  -->
				<write_latency>13</write_latency>
				<writable>true</writable>
				<cached>false</cached>
			</bank>
			<bank>
				<name>DFLASH0</name>   <!--DFLASH0 no cached-->
				<address><offset>0xAF000000</offset></address>
				<size>0x00800000</size> <!-- 1 MByte /-->
				<type>ROM</type>
				<latency>54</latency> <!--  <latency><xsl:value-of select="1+$dfrws"/></latency>  -->
				<write_latency>54</write_latency>
				<writable>true</writable>
				<cached>false</cached>
			</bank>
			<bank>
				<name>DFLASH1</name>   <!--DFLASH1 no cached-->
				<address><offset>0xAF110000</offset></address>
				<size>0x00080000</size> <!-- 64 KByte /-->
				<type>ROM</type>
				<latency>54</latency> <!--  <latency><xsl:value-of select="1+$dfrws"/></latency>  -->
				<write_latency>54</write_latency>
				<writable>true</writable>
				<cached>false</cached>
			</bank>
			<bank>
				<name>IO0</name>   <!--IO0 no cached--> <!-- PORT 0-2 /-->
				<address><offset>0xF003A000</offset></address>
				<size>0x00001800</size> <!-- 3* 256 Bytes /-->
				<type>IO</type>
				<latency>2</latency>
				<write_latency>2</write_latency>
				<writable>true</writable>
				<cached>false</cached>
			</bank>
			<bank>
				<name>IO1</name>   <!--IO1 no cached--> <!-- PORT 10-15 /-->
				<address><offset>0xF003B000</offset></address>
				<size>0x00003000</size> <!-- 6* 256 Bytes /-->
				<type>IO</type>
				<latency>2</latency>
				<write_latency>2</write_latency>
				<writable>true</writable>
				<cached>false</cached>
			</bank>
			<bank>
				<name>IO2</name>   <!--IO2 no cached--> <!-- PORT 20-23 /-->
				<address><offset>0xF003C000</offset></address>
				<size>0x00002000</size> <!-- 4* 256 Bytes /-->
				<type>IO</type>
				<latency>2</latency>
				<write_latency>2</write_latency>
				<writable>true</writable>
				<cached>false</cached>
			</bank>
			<bank>
				<name>IO3</name>   <!--IO3 no cached--> <!-- PORT 32-34 /-->
				<address><offset>0xF003D200</offset></address>
				<size>0x00001800</size> <!-- 3* 256 Bytes /-->
				<type>IO</type>
				<latency>2</latency>
				<write_latency>2</write_latency>
				<writable>true</writable>
				<cached>false</cached>
			</bank>
			<bank>
				<name>IO4</name>   <!--IO4 no cached--> <!-- PORT 40 /-->
				<address><offset>0xF003E000</offset></address>
				<size>0x00000800</size> <!-- 256 Bytes /-->
				<type>IO</type>
				<latency>2</latency>
				<write_latency>2</write_latency>
				<writable>true</writable>
				<cached>false</cached>
			</bank>
		</banks>
	</memory>
	<bht>
		<correct_taken_penalty>1</correct_taken_penalty>
		<correct_not_taken_penalty>0</correct_not_taken_penalty>
		<incorrect_taken_penalty>2</incorrect_taken_penalty>
		<incorrect_not_taken_penalty>2</incorrect_not_taken_penalty>
	</bht>

</platform>

<script>
	<config name="otawa::GRAPHS_OUTPUT_DIRECTORY" value="exeg16p"/>
	<config name="otawa::ipet::EXPLICIT" value="true"/>
	<config name="otawa::tricore16::CORE" value="0"/>
	<config name="otawa::DEFAULT_BRANCH_PENALTY" value="0" />
	
	
	<!--   
	<step require="otawa::VIRTUALIZED_CFG_FEATURE"/>
	<step processor="otawa::tricore16::BranchPreductionTC16E"/>
	-->
	
	<step require="otawa::ICACHE_CATEGORY2_FEATURE"/> <!--  collect LBlocks, identifying when a cache load is necessary -->
	<step require="otawa::ICACHE_ONLY_CONSTRAINT2_FEATURE"/>
	
	<!-- data cache -->		
	<step processor="otawa::dcache::CLPBlockBuilder"/>
	<step processor="otawa::dcache::ACSMustPersBuilder"/>            
	<step processor="otawa::dcache::ACSMayBuilder"/>
	<step processor="otawa::dcache::CATBuilder"/>
	<step processor="otawa::dcache::CatConstraintBuilder"/>
	
	
	
	
	<step processor="otawa::tricore16::BBTimerTC16P">
	</step>
	<step require="otawa::ipet::WCET_FEATURE"/>
	<step processor="otawa::display::ILPSystemDisplayer"/>
	
	<step processor="otawa::ilp::Output">
		<config name="otawa::ilp::OUTPUT_PATH" value="abc.ilp"/>
	</step>		
</script>



<script_original>
	<config name="otawa::ipet::EXPLICIT" value="true"/>
	<step require="otawa::VIRTUALIZED_CFG_FEATURE"/>
	<xsl:if test="$core!=0">
		<step require="otawa::branch::CATEGORY_FEATURE"/>
	</xsl:if>
	<step require="otawa::ICACHE_CATEGORY2_FEATURE"/>
	<step require="otawa::tricore16::PREFETCH_CATEGORY_FEATURE"/>
	<step require="otawa::ICACHE_ONLY_CONSTRAINT2_FEATURE"/>
	<step processor="otawa::tricore16::BBTimer">
		<xsl:if test="$gpath!=''">
			<config name="otawa::GRAPHS_OUTPUT_DIRECTORY" value="{$gpath}"/>
		</xsl:if>
		<config name="otawa::tricore16::CORE" value="{$core}"/>
	</step>
	<!--step require="otawa::ipet::EDGE_TIME_FEATURE"/-->
	<step require="otawa::ipet::WCET_FEATURE"/>

	<step processor="otawa::display::ILPSystemDisplayer"/>

</script_original>

</otawa-script>
	
