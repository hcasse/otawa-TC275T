////////////////////////////////////
// Instructions timing for TC 1.6P
////////////////////////////////////

// register macros
macro R(t, i) = ((t << 4) | i)
macro D = 0
macro A = 1
macro E = 2
macro P = 3
macro NOREG = 1 << 8
macro MULTI(n) = (2 << 8) | (n)
macro SYNC(t, i) = (3 << 8) | R(t, i)

// timing macros
macro coreE = "coreE"
macro select(te, tp) = if coreE then te else tp endif

// pipeline macros
macro IP = 0
macro LS = 1
macro LP = 2
macro FP = 3
macro BR = 4


//abs
extend abs_reg , abs_b , abs_h , absdif_reg , absdif_const9 , absdif_b , absdif_h
	prod = 0
	pipe = IP

//add
extend 	add_reg , add_const9 , add_b , add_h , addc_reg , addc_const9 , addi ,
		addih , add16_1 , add16_2 , add16_3 , add16_4 , add16_5 , add16_6 ,
		addx_reg , addx_const9
	prod = 0
	pipe = IP

//absdif
extend absdifs_reg , absdifs_const9 , absdifs_h , abss , abss_h
	prod = select(0, 1)
	pipe = IP
	
//adds
extend 	adds_reg , adds_const9 , adds16 , addsh_s , addsh_u ,
		adds_u_const , adds_u_reg
	prod = select(0, 1)
	pipe = IP
	
//logical inst 
extend 	and_reg , and_const9 , and16_1 , and16_2 , and_and_t , and_andn_t , and_eq_const ,
		and_eq_reg , and_ge_reg , and_ge_const , and_geu_reg , and_geu_const ,
		and_lt_const , and_lt_reg , and_lt_u_const9 , and_lt_u_reg , and_ne_reg ,
		and_ne_const ,  and_or_t , and_nor_t , andt , andn_reg , andn_const9 , andn_t ,
		nand_reg , nand_const , nand_t , nor_reg , nor_const , nort , or_reg ,
		or_const9 , or_16_1 , or_16_2 , or_and_t , or_andn_t , or_eq_const , or_eq_reg ,
		or_ge_const , or_ge_reg , or_ge_u_const , or_ge_u_reg , or_lt_reg , or_lt_const9 ,
		or_lt_u_reg , or_lt_u_const9 , or_ne_reg , or_ne_const9 , or_nor_t , or_or_t , ort ,
		orn_const , orn_reg , orn_t , xnor_reg , xnor_const , xnor_t , xor_reg , xor_const9 ,
		xor16 , xor_t , xor_eq_const , xor_eq_reg , xor_ge_reg , xor_ge_const , xor_geu_reg ,
		xor_geu_const , xor_lt_reg , xor_lt_const , xor_ltu_reg , xor_ltu_const , xor_ne_const , xor_ne_reg
	prod = 0
	pipe = IP
	
//cadd-csub
extend 	cadd_reg , cadd_const9 , cadd16 , caddn_const9 , caddn_reg , cadd16_n ,
		csub , csubn
	prod = 0
	pipe = IP
	
//max-min
extend 	max_reg , max_const , max_b , max_bu , max_h , max_hu , maxu_reg ,
		maxu_const , min_reg , min_const , min_u_const , min_u_reg , min_b ,
		min_bu , min_h , min_hu
	prod = 0
	pipe = IP
	
//sub
extend 	r_sub , rsub_16, sub_reg , sub_16_1 , sub_16_2 , sub_16_3 , subb ,
		subh , subc , subx
	prod = 0
	pipe = IP
	
// rsubs-subs
extend rsubs , rsubs_u , subs , subs16 , subs_u , subsh , subshu
	prod = select(0, 1)
	pipe = IP
	
//sat
extend sat_b , sat16_b , sat_bu , sat16_bu , sat_h , sat_hu , sat16_h , sat16_hu
	prod = 0
	pipe = IP

//sel
extend sel_reg , sel_const9 , seln_reg , seln_const9
	prod = 0
	pipe = IP
	
//eq
extend 	eq_reg , eq_const9 , eq16_1 , eq16_2 , eq_b , eq_h , eq_w , eqanyb_reg ,
		eqanyb_const , eqanyh_reg , eqanyh_const
	prod = 0
	pipe = IP
	
//ge
extend ge_reg , ge_const9 , geu_reg , ge_u_const9
	prod = 0
	pipe = IP
	
//lt
extend 	lt_reg , lt_const , lt16_const , lt16_reg , lt_b , lt_bu , lt_h , lt_hu , lt_w , lt_wu ,
		ltu_reg , ltu_const
	prod = 0
	pipe = IP

//ne
extend ne_reg , ne_const9
	pipe = IP
	prod = 0
	
//count inst
extend clo , clo_h , cls , cls_h , clz , clz_h
	prod = 0
	pipe = IP
	
//extract
extend 	dextr_reg , dextr_pos , extr_reg , extr_width , extr_pos , extr_u_reg , extr_u_width ,
		extr_u_pos , imask_1 , imask_2 , imask_3 , imask_4 , insert_reg , insert_width ,
		insert_pos , insert_const4 , insert_const4_width , insert_const4_pos
	prod = select(0, 1)
	pipe = IP
	
//ins
extend ins_t , insn_t
	prod = 0
	pipe = IP

//lea
extend lea_18 , lea_10 , lea_16
	prod = 0
	pipe = LS

//move
extend 	mov_16_1 , mov_16_2 , mov_16_3 , mov_16_4 , mov_reg , mov_const32 , cmov16_reg ,
		cmov16_const , cmovn16_const , cmovn16_reg , mov_u , movh_const16
	prod = 0
	pipe = IP
	
//move 64 bits
extend mov_const64 , mov_reg64 , mov_rr64
	prod = 1
	pipe = IP

//shift inst
extend 	sh_reg , sh_const9 , sh_16 , sh_and_t , sh_andn_t , sh_eq_const , sh_eq_reg , sh_ge_reg ,
		sh_ge_const , sh_ge_u_reg , sh_ge_u_const , sh_h_reg , sh_h_const , sh_ne_reg , sh_ne_const ,
		sh_nor_t , sh_or_t , sh_orn_t , sh_xnor_t , sh_xor_t , sh_lt_reg , sh_lt_const , sh_lt_u_reg ,
		sh_lt_u_const , sh_nand_t , sha_reg , sha_const9 , sha_16 , sha_h_const , sha_h_reg
	prod = 0
	pipe = IP

//shas
extend shas_const , shas_reg
	prod = select(0, 1)
	pipe = IP

//coprocessor inst
extend 	bmerge , bsplit , parity , pack , ixmin_u , ixmin , ixmax , ixmax_u ,
		unpack
// crc32
	prod = 1 
	pipe = IP
	
//divide inst
extend dvadj , dvinit_ , dvinit_bu , dvinit_b , dvinit_h , dvinit_hu , dvinit_u
	prod = 1
	pipe = IP
	
//dvstep
extend dvstep_ , dvstep_u
	prod = select(3, 5)
	pipe = IP
	
//div
extend divs , divu
	prod = select(9, 10)
	pipe = IP

//mul-mul.u
extend 	mul_reg , mul_e_reg , mul_const9 , mul_e_const9 , mul16 ,
		mul_u , mul_u_const9
	prod = 1
	pipe = IP
	
//mul inst
extend 	muls_reg , muls_u_reg , muls_const9 , muls_u_const ,
		mulh_ll , mulh_ul , mulh_lu , mulh_uu , mul_q1 ,
		mul_q2 , mul_q3 , mul_q4 , mul_q5 , mul_q6 , mul_q7 ,
		 mul_q8 , mulmh_1 , mulmh_2 , mulmh_3 , mulmh_4 ,
		 mulrh_1 , mulrh_2 , mulrh_3 , mulrh_4 , mulrq_1 , mulrq_2
	prod = select(1, 2)
	pipe = IP

//madd inst
extend 	madd64_const , madd64_reg , madd32_const , madd32_reg ,
		madd_u_reg , madd_u_const , madds64_const , madds64_reg ,
		madds32_const , madds32_reg , maddsu64_const , maddsu64_reg ,
		maddsu32_const , maddsu32_reg , maddh_1 , maddh_2 , maddh_3 ,
		maddh_4 , maddq_1 , maddq_2 , maddq_3 , maddq_4 , maddq_5 ,
		maddq_6 , maddq_7 , maddq_8 , maddq_9 , maddq_10 , maddm_h_ll, 
		 maddm_h_lu , maddm_h_ul , maddm_h_uu , maddms_h_ll , maddms_h_uu ,
		 maddms_h_ul , maddms_h_lu , maddrh_1 , maddrh_2 , maddrh_3 , maddrh_4 ,
		 maddrh_5 , maddrq_1 , maddrq_2 , maddrsh_1 , maddrsh_2 , maddrsh_3 ,
		 maddrsh_4 , maddrsh_5 , maddrsq_1 , maddrsq_2 , maddsh_1 , maddsh_2 ,
		 maddsh_3 , maddsh_4 , maddsq_1 , maddsq_2 , maddsq_3 , maddsq_4 ,
		 maddsq_5 , maddsq_6 , maddsq_7 , maddsq_8 , maddsq_9 , maddsq_10 ,
		 maddsuh_1 , maddsuh_2 , maddsuh_3 , maddsuh_4 , maddsush_1 ,
		 maddsush_2 , maddsush_3 , maddsush_4 , maddsumh_1 , maddsumh_2 ,
		 maddsumh_3 , maddsumh_4 , maddsumsh_1 , maddsumsh_2 , maddsumsh_3 ,
		 maddsumsh_4 , maddsurh_1 , maddsurh_2 , maddsurh_3 , maddsurh_4 ,
		 maddsursh_1 , maddsursh_2 , maddsursh_3 , maddsursh_4
	prod = select(1, 2)
	pipe = IP
	
//msub inst
extend	msub_reg , msub_const , msub_reg64 , msub_const64 , msubs_reg ,
		msubs_const , msubs_reg64 , msubs_const64 , msubu_reg , msubu_const ,
		msubsu_reg , msubsu_const , msubsu64_reg , msubsu64_const ,
		msubh_1 , msubh_2 , msubh_3 , msubh_4 , msubsh_1 , msubsh_2 ,
		msubsh_3 , msubsh_4 , msubq_1 , msubq_2 , msubq_3 , msubq_4 ,
		msubq_5 , msubq_6 , msubq_7 , msubq_8 , msubq_9 , msubq_10 ,
		msubsq_1 , msubsq_2 , msubsq_3 , msubsq_4 , msubsq_5 , msubsq_6 ,
		msubsq_7 , msubsq_8 , msubsq_9 , msubsq_10 , msubmh_1 , msubmh_2 ,
		msubmh_3 , msubmh_4 , msubmsh_1 , msubmsh_2 , msubmsh_3 , msubmsh_4 ,
		msubrh_1 , msubrh_2 , msubrh_3 , msubrh_4 , msubrsh_1 , msubrsh_2 ,
		msubrsh_3 , msubrsh_4 , msubrh_5 , msubrsh_5 , msubrq_1 , msubrq_2 ,
		msubrsq_1 , msubrsq_2 , msubadh_1 , msubadh_2 , msubadh_3 , msubadh_4 ,
		msubadsh_1 , msubadsh_2 , msubadsh_3 , msubadsh_4 , msubadmh_1 ,
		msubadmh_2 , msubadmh_3 , msubadmh_4 , msubadmsh_1 , msubadmsh_2 ,
		msubadmsh_3 , msubadmsh_4 , msubadrh_1 , msubadrh_2 , msubadrh_3 ,
		msubadrh_4 , msubadrsh_1 , msubadrsh_2 , msubadrsh_3 , msubadrsh_4 
	prod = select(1, 2)
	pipe = IP

// add A registers
extend 	add_a_reg , add_a_16_const , add_a_16_reg , addih_a ,
		eq_a , eqz_a , gea , lt_a , ne_a , neza ,
		nop32 , nop_16 , sub_a , sub_a_16
	prod = 0
	pipe = LS
	
//addsc.a
extend addsc_a , addsc_at , addsca
	prod = select(0, 1)
	pipe = LS

//mfcr
extend mfcr
	prod = 1
	pipe = LS
	
//move inst
extend 	mtcr , movh_a , mov_a , mov_a_16_4 , mov_a_16_5 , mov_aa ,
		mov_aa_16 , mov_d , mov_d_16
	prod = 0
	pipe = LS

//fcall
extend fcall , fcalla , fcalli , fret16 , fret
	prod = 0
	pipe = LS

// control flow inst
extend 	call , call16 , calla , calli , ret , ret_16 ,
		bisr , bisr16 , syscall ,
		svlcx , rslcx , rfe , rfe16 , rfm
	prod = 3
	pipe = LS


///////////////////////
//load instructions
///////////////////////

//ld.a
extend 	ld_a_abs , ld_a_bo16 , ld_a_pre , ld_a_bo10 , ld_a_post , ld_a_circ , ld_a_rev
	prod = 2
	mreg = R(A, a.i)
	pipe = LS

extend ld_a_16_1, ld_a_16_5
	prod = 2
	mreg = R(A, 15)
	pipe = LS

extend ld_a_16_2 , ld_a_16_3 , ld_a_16_4
	prod = 2
	mreg = R(A, c.i)
	pipe = LS


//ld.b
extend ld_b_bo10 , ld_b_post , ld_b_pre , ld_b_abs , ld_b_bo16 , ld_b_rev , ld_b_circ
	prod = 1
	mreg = R(D, a.i)
	pipe = LS


//ld.bu
extend ld_bu_abs , ld_bu_bo10 , ld_bu_bo16 , ld_bu_pre , ld_bu_post , ld_bu_circ , ld_bu_rev
	prod = 1
	mreg = R(D, a.i)
	pipe = LS

extend ld_bu_16_1 , ld_bu_16_2 , ld_bu_16_3
	prod = 1
	mreg = R(D, c.i)
	pipe = LS

extend ld_bu_16_4
	prod = 1
	mreg = R(D, 15)
	pipe = LS


//ld.d
extend ld_d_bo10 , ld_d_post , ld_d_abs , ld_d_pre , ld_d_rev , ld_d_circ
	prod = 1
	mreg = R(D, a.i)
	pipe = LS


//ld.da
extend ld_da_bo10 , ld_da_post , ld_da_abs , ld_da_pre , ld_da_rev , ld_da_circ
	prod = 2
	mreg = R(A, a.i)
	pipe = LS


//ld.h
extend ld_h_abs , ld_h_bo10 , ld_h_rev , ld_h_circ , ld_h_post , ld_h_pre, ld_h_bo16 
	prod = 1
	mreg = R(D, a.i)
	pipe = LS

extend ld_h_16_1
	prod = 1
	mreg = R(D, 15)
	pipe = LS

extend ld_h_16_2 , ld_h_16_3 , ld_h_16_4
	prod = 1
	mreg = R(D, c.i)
	pipe = LS


//ld.hu
extend ld_hu_abs , ld_hu_bo10 , ld_hu_rev , ld_hu_circ , ld_hu_post , ld_hu_pre
	mreg = R(D, a.i)
	prod = 1
	pipe = LS

extend ld_hu_bo16
	prod = 1
	pipe = LS


//ld.w
extend ld_w_abs , ld_w_bo10 , ld_w_post , ld_w_pre , ld_w_bo16 , ld_w_rev , ld_w_circ
	prod = 1
	mreg = R(D, a.i)
	pipe = LS

extend ld_w_16_1, ld_w_16_5
	prod = 1
	mreg = R(D, 15)
	pipe = LS

extend ld_w_16_2 , ld_w_16_3 , ld_w_16_4
	prod = 1
	mreg = R(D, c.i)
	pipe = LS


//ld.q
extend ld_q_abs , ld_q_bo10 , ld_q_rev , ld_q_circ , ld_q_post , ld_q_pre 
	prod = 1
	mreg = R(D, a.i)	
	pipe = LS


///////////////////////
// store instructions
///////////////////////

//st.a
extend st_a_abs , st_a_bo10 , st_a_rev , st_a_circ , st_a_post , st_a_pre , st_a_bol
	prod = 0
	mreg = R(A, a.i)
	pipe = LS

extend st_a_16_1, st_a_16_3 , st_a_16_4
	prod = 0
	mreg = R(A, a.i)
	pipe = LS

extend st_a_16_2, st_a_16_5
	prod = 0
	mreg = R(A, 15)
	pipe = LS

	
//st.b
extend st_b_abs , st_b_bo10 , st_b_post , st_b_pre , st_b_bo16 , st_b_rev , st_b_circ
	prod = 0
	mreg = R(D, a.i)
	pipe = LS

extend  st_b_16_1 , st_b_16_2 , st_b_16_3
	prod = 0
	mreg = R(D, a.i)
	pipe = LS

extend st_b_16_4
	prod = 0
	mreg = R(D, 15)
	pipe = LS

//st.d
extend st_d_bo10 , st_d_abs , st_d_pre , st_d_post , st_d_rev , st_d_circ
	prod = 0
	mreg = R(E, a.i)
	pipe = LS


//st.da
extend st_da_bo10 , st_da_abs , st_da_pre , st_da_post , st_da_rev , st_da_circ
	prod = 0
	mreg = R(P, a.i)
	pipe = LS

//st.h
extend st_h_abs , st_h_bo10 , st_h_post , st_h_pre , st_h_bo16 , st_h_rev , st_h_circ
	prod = 0
	mreg = R(D, a.i)
	pipe = LS

extend st_h_16_1 , st_h_16_3 , st_h_16_4
	prod = 0
	mreg = R(D, a.i)
	pipe = LS

extend st_h_16_2
	prod = 0
	mreg = R(D, 15)
	pipe = LS


//st.q
extend st_q_abs , st_q_bo10 , st_q_rev , st_q_circ , st_q_post , st_q_pre
	prod = 0
	mreg = R(D, a.i)
	pipe = LS

//st.w
extend st_w_abs , st_w_bo10 , st_w_rev , st_w_post , st_w_pre , st_w_circ, st_w_bo16
	prod = 0
	mreg = R(D, a.i)
	pipe = LS

extend st_w_16_1 , st_w_16_5
	prod = 0
	mreg = R(D, 15)
	pipe = LS

extend st_w_16_2 , st_w_16_3 , st_w_16_4
	prod = 0
	mreg = R(D, a.i)
	pipe = LS


///////////////////////
// multiple load/store instructions
///////////////////////

// ldlcx-lducx
extend ldlcx_abs, ldlcx_ind , lducx_abs , lducx_ind
	prod = 8
	// TODO mreg
	pipe = LS
	

// stlcx-stucx
extend stlcx_abs , stlcx_ind , stucx_abs , stucx_ind
	prod = 0
	// TODO mreg
	pipe = LS


///////////////////////
// load/store instructions
///////////////////////

//ldmst
extend ldmst_abs, ldmst_bo10 , ldmst_post , ldmst_pre , ldmst_br , ldmst_circ
	prod = 1
	mreg = R(E, a.i)
	pipe = LS

//swapmsk
/*extend swapmsk_bo , swapmsk_rev , swapmsk_circ , swapmsk_post , swapmsk_pre
	prod = 2
	mreg = R(E, a.i)
	pipe = LS*/

//swap.w
extend swap_abs , swap_bo10 , swap_br , swap_ca , swap_post , swap_pre
	prod = 2
	mreg = R(A, a.i)
	pipe = LS

//cmpswap
/*extend cmpswap_w_off , cmpswap_w_rev , cmpswap_w_ca , cmpswap_w_post , cmpswap_w_pre
	prod = 2
	mreg = R(E, a.i)
	pipe = LS*/

//st.t
extend st_t
	prod = 1
	mreg = NOREG
	pipe = LS


////////////////////////
// system instructions
////////////////////////
	
//cache inst 
extend cachea_i_bo , cachea_i_rev , cachea_i_circ , cachea_i_post , cachea_i_pre , cachea_w_bo , cachea_w_rev , cachea_w_circ , cachea_w_post , cachea_w_pre , cachea_wi_bo , cachea_wi_rev , cachea_wi_circ , cachea_wi_post , cachea_wi_pre , cachei_w_bo , cachei_w_post , cachei_w_pre , cachei_i_bo , cachei_i_post , cachei_i_pre , cachei_wi_bo , cachei_wi_post , cachei_wi_pre
	prod = 0
	pipe = LS


/////////////////////////////////
// floating Point instructions
/////////////////////////////////

extend addf
	prod = 1
	pipe = FP
	
extend cmpf
	prod = 0
	pipe = FP
	
extend divf 
	prod = 7
	pipe = FP
	
extend ftoi , ftoiz , ftoq31 , ftoq31z , ftou , ftouz , itof , q31tof , utof
	prod = 1
	pipe = FP
	
extend maddf , msubf
	prod = 2
	pipe = FP
	
extend mulf
	prod = 1
	pipe = FP
	
extend qseedf
	prod = 0
	pipe = FP
	
extend subf
	prod = 1
	pipe = FP

		
////////////////////////
// Jump instructions
////////////////////////

extend j , j16 , ja , jeq_a , jeq_reg_const , jeq_reg_reg , jeq16_const_1 , jeq16_const_2 , jeq16_reg_1 , jeq16_reg_2 , jge_reg , jge_const4 , jge_u , jge_u_const4 , jgez , jgtz , ji , ji_16 , jl , jla , jlez , jli , jlt_reg , jlt_const4 , jlt_u , jlt_u_const4 , jltz , jne_reg , jne_const4 , jne_a , jne16_reg_1 , jne16_const_1 , jne16_reg_2 , jne16_const_2 , jned_reg , jned_const4 , jnei_reg , jnei_const4 , jnz_16_1 , jnz_16_2 , jnz_a_16 , jnz_t_16 , jnz_a , jnz_t , jz_t_16 , jz_disp4_16 , jz_disp8_16 , jz_a_16 , jz_a , jz_t
	prod = 0
	pipe = BR
	
extend loop , loop_16 , loopu
	prod = -1
	pipe = LP




///////////////////////
// Other instructions
///////////////////////

extend debug , debug16 , disable , disable2 , dsync , enable , isync , not16 , restore , rstv , trapv , trapsv
// wait
	prod = 0
	pipe = LS

